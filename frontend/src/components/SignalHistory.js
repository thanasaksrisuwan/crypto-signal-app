import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './SignalHistory.css';

const SignalHistory = ({ symbol, settings }) => {
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
  const [signalHistory, setSignalHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î API Base URL
  const API_BASE = process.env.NODE_ENV === 'production' 
    ? window.location.origin 
    : 'http://localhost:8000';
  
  // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    const fetchHistory = async () => {
      setLoading(true);
      try {
        const response = await axios.get(`${API_BASE}/api/history-signals?symbol=${symbol}&limit=20`);
        if (Array.isArray(response.data)) {
          setSignalHistory(response.data);
        } else {
          setSignalHistory([]);
        }
      } catch (error) {
        console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏î‡πâ:', error);
        setSignalHistory([]);
      } finally {
        setLoading(false);
      }
    };
    
    fetchHistory();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    const intervalId = setInterval(fetchHistory, 60000);
    
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    return () => clearInterval(intervalId);
  }, [symbol]);
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  const filterSignals = (signals) => {
    return signals.filter(signal => {
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
      if (signal.confidence < settings.confidenceThreshold) {
        return false;
      }
      
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
      if (!settings.showWeakSignals && signal.category.toLowerCase().includes('weak')) {
        return false;
      }
      
      return true;
    });
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
  const getSignalEmoji = (category) => {
    switch (category.toLowerCase()) {
      case 'strong buy':
        return 'üöÄ';
      case 'weak buy':
        return 'üìà';
      case 'hold':
        return '‚è∏Ô∏è';
      case 'weak sell':
        return 'üìâ';
      case 'strong sell':
        return '‚ö†Ô∏è';
      default:
        return 'üîî';
    }
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏•‡∏≤‡∏™ CSS ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
  const getSignalClass = (category) => {
    switch (category.toLowerCase()) {
      case 'strong buy':
        return 'signal-item strong-buy';
      case 'weak buy':
        return 'signal-item weak-buy';
      case 'hold':
        return 'signal-item hold';
      case 'weak sell':
        return 'signal-item weak-sell';
      case 'strong sell':
        return 'signal-item strong-sell';
      default:
        return 'signal-item';
    }
  };
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  const filteredSignals = filterSignals(signalHistory);
  
  return (
    <div className="signal-history-container">
      <h3>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h3>
      
      {loading ? (
        <div className="loading-message">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì...</div>
      ) : filteredSignals.length > 0 ? (
        <ul className="signal-list">
          {filteredSignals.map((signal, index) => (
            <li key={index} className={getSignalClass(signal.category)}>
              <div className="signal-header">
                <span className="signal-emoji">{getSignalEmoji(signal.category)}</span>
                <span className="signal-type">{signal.category.toUpperCase()}</span>
                <span className="signal-confidence">{(signal.confidence * 100).toFixed(1)}%</span>
              </div>
              
              <div className="signal-body">
                <div className="signal-details">
                  <span className="signal-price">${signal.price.toFixed(2)}</span>
                  <span className="signal-forecast">‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {signal.forecast_pct.toFixed(2)}%</span>
                </div>
                
                <div className="signal-time">
                  {new Date(signal.timestamp).toLocaleString()}
                </div>
              </div>
            </li>
          ))}
        </ul>
      ) : (
        <div className="empty-message">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</div>
      )}
    </div>
  );
};

export default SignalHistory;